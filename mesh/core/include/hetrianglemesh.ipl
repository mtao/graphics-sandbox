#ifndef HETRIANGLEMESH_IPL
#define HETRIANGLEMESH_IPL
#ifndef HETRIANGLEMESH_H
#include "hetrianglemesh.h"
#endif


template <typename Scalar>
inline auto HETriangleMesh<Scalar>::get_vertex(size_t idx) -> Vec3& {
    return m_vertices[idx];
}
template <typename Scalar>
inline auto HETriangleMesh<Scalar>::get_vertex(size_t idx) const -> const Vec3&{
    return m_vertices[idx];
}




template <typename Scalar>
void internal::MeshConstructor<HETriangleMesh<Scalar> >::add_triangle(size_t a, size_t b, size_t c) {
    mtao::HETriangleTopologyConstructor::add_triangle(a,b,c);
}
template <typename Scalar>
void internal::MeshConstructor<HETriangleMesh<Scalar> >::add_vertex(Scalar a, Scalar b, Scalar c) {
    m_vertices.push_back(Vec3(a,b,c));
}


#endif
